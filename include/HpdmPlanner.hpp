/*
 * @Author: fujiawei0724
 * @Date: 2021-12-12 16:51:30
 * @LastEditors: fujiawei0724
 * @LastEditTime: 2022-01-06 14:46:49
 * @Description: Realization of the HPDM behavior planner based on reinforcement learning.
 */

#pragma once


#include "Const.hpp"
#include "VehicleState.hpp"
#include "BehaviorPlanner.hpp"

namespace HpdmPlanner {

using namespace Common;

class ActionInterface {
 public:
    /**
     * TODO: only support predicted time 4.0s with a time gap 0.4s, add more support parameters here
     * @brief transform an action index to a behavior sequence
     * @param action_index action index generate by model
     * @return behavior sequence
     */    
    static std::vector<VehicleBehavior> indexToBehSeq(const int& action_index);

    /**
     * @brief transform a series of action indices
     * @param {*}
     * @return {*}
     */   
    static std::vector<std::vector<VehicleBehavior>> indexVecToBehSeqVec(const std::vector<int>& action_indices);

    /**
     * TODO: only support predicted time 4.0s with a time gap 0.4s, add more support parameters here
     * @brief transform an action index to a intention sequence
     * @param action_index action index generate by model
     * @return intention sequence
     */    
    static std::vector<VehicleIntention> indexToIntentionSeq(const int& action_index);

    /**
     * @brief transform a series of action indices
     * @param {*}
     * @return {*}
     */   
    static std::vector<std::vector<VehicleIntention>> indexVecToIntentionSeqVec(const std::vector<int>& action_indices);

};



/**
 * @brief transform vehicles state and lanes information to state 
 * @param nearest_lane nearest_lane for ego_vehicle
 * @return {*}
 */
class StateInterface {
 public:
    StateInterface(const Lane& nearest_lane);
    StateInterface();
    ~StateInterface();

    /**
     * @brief generate state from environment information
     * @param lane_info lane information
     * @param ego_vehicle ego vehicle information
     * @param sur_vehicles surround vehicles information
     * @param state state array generated
     */
    void runOnce(const std::vector<double>& lane_info, const Vehicle& ego_vehicle, const std::unordered_map<int, Vehicle>& sur_vehicles, std::vector<double>* state);

    /**
     * @brief transform single vehicle state
     * @param {*}
     * @return {*}
     */    
    std::vector<double> transformEgoVehicleState(const Vehicle& vehicle);

    /**
     * TODO: maybe a logic could be added here to distinct the differerce of different surround vehicles
     * @brief transform surround vehicles states
     * @param {*}
     * @return {*}
     */    
    std::vector<double> transformSurroundVehicleState(const std::unordered_map<int, Vehicle>& sur_vehicles);

    StateTransformer* stf_{nullptr};
    
};

// Interface with libtorch
class TorchInterface {
 public:
    TorchInterface(const std::string& model_path);
    ~TorchInterface();

    /**
     * @brief generate best action index from forwarding model
     * @param state state inputed to the model
     * @param action_index action generated by model
     */    
    void runOnce(const std::vector<double>& state, std::vector<int>* candi_action_indices);

    std::string model_path_;
};

class TrajectoryGenerator {
 public:
    using Trajectory = std::vector<Vehicle>;
    using BehaviorSequence = std::vector<VehicleBehavior>;
    using IntentionSequence = std::vector<VehicleIntention>;
    TrajectoryGenerator(BehaviorPlanner::MapInterface* map_itf, double dt = 0.4);
    ~TrajectoryGenerator();

    /**
     * @brief Load data for replanning
     * @param {*}
     * @return {*}
     */    
    void load(const Lane& pre_reference_lane, const Vehicle& pre_ego_desired_vehicle_state);

    /**
     * @brief Simulate single behavior sequence
     * @param surround_vehicles
     * @param ego_vehicle
     * @param behavior_sequence
     * @param ego_traj
     * @param safe
     * @param cost
     */    
    void simulateSingleBehaviorSequence(const Vehicle& ego_vehicle, const std::unordered_map<int, Vehicle>& surround_vehicles, const BehaviorSequence& behavior_sequence, Trajectory* ego_traj, std::unordered_map<int, Trajectory>* sur_trajs, bool* safe, double* cost, Lane* target_behavior_reference_lane);

    /**
     * @brief Simulate single behavior sequence
     * @param surround_vehicles
     * @param ego_vehicle
     * @param behavior_sequence
     * @param ego_traj
     * @param safe
     * @param cost
     */    
    void simulateSingleIntentionSequence(const Vehicle& ego_vehicle, const std::unordered_map<int, Vehicle>& surround_vehicles, const IntentionSequence& intention_sequence, const int& action_index, Trajectory* ego_traj, std::unordered_map<int, Trajectory>* sur_trajs, bool* safe, double* cost, Lane* target_intention_reference_lane, bool* is_lane_changed);

    /**
     * @brief simulate single behavior in a sequence 
     * @param {SemanticVehicle&} ego_semantic_vehicle
     * @param {double&} ego_desired_velocity
     * @param {Vehicle&} ego_vehicle_next_state
     * @return {*}
     */
    void simulateSingleBehavior(const SemanticVehicle& ego_semantic_vehicle, const std::unordered_map<int, SemanticVehicle>& surround_semantic_vehicles, const double& ego_desired_velocity, Vehicle& ego_vehicle_next_state, std::unordered_map<int, Vehicle>& surround_vehicles_next_states);

    /**
     * @brief simulate all candidates behavior
     * @param {*}
     * @return {*}
     */
    void simulateCandidatesBehaviorSequences(const Vehicle& ego_vehicle, const std::unordered_map<int, Vehicle>& surround_vehicles, const std::vector<BehaviorSequence>& candi_sequences, Trajectory* ego_traj, std::unordered_map<int, Trajectory>* sur_trajs, bool* safe, double* cost, Lane* target_reference_lane, int* final_action_index);

    /**
     * @brief simulate all candidates behavior
     * @param {*}
     * @return {*}
     */
    void simulateCandidatesIntentionSequences(const Vehicle& ego_vehicle, const std::unordered_map<int, Vehicle>& surround_vehicles, const std::vector<IntentionSequence>& candi_sequences, Trajectory* ego_traj, std::unordered_map<int, Trajectory>* sur_trajs, bool* safe, double* cost, Lane* target_reference_lane, int* final_action_index, bool* is_final_lane_changed);

    /**
     * @brief multi thread interface 
     * @param {*}
     * @return {*}
     */    
    void simulateSingleCandiBehaviorSequence(const Vehicle& ego_vehicle, const std::unordered_map<int, Vehicle>& surround_vehicles, const BehaviorSequence& executed_sequence, int index);

    /**
     * @brief multi thread interface 
     * @param {*}
     * @return {*}
     */    
    void simulateSingleCandiIntentionSequence(const Vehicle& ego_vehicle, const std::unordered_map<int, Vehicle>& surround_vehicles, const IntentionSequence& executed_sequence, int index);

    std::vector<Trajectory> candi_ego_trajs_{};
    std::vector<std::unordered_map<int, Trajectory>> candi_sur_trajs_{};
    std::vector<bool> candi_safes_{};
    std::vector<double> candi_costs_{};
    std::vector<Lane> candi_reference_lanes_{};
    std::vector<bool> candi_is_lane_changed_{};

    BehaviorPlanner::MapInterface* map_itf_{nullptr};
    double dt_{0.0};
    bool with_consistence_ = false;
    Lane pre_reference_lane_;
    Vehicle pre_ego_desired_vehicle_state_;
};

class HpdmPlannerCore {
 public:
    HpdmPlannerCore(BehaviorPlanner::MapInterface* map_itf, const Lane& nearest_lane, const std::string& model_path);
    HpdmPlannerCore(BehaviorPlanner::MapInterface* map_itf, const Lane& nearest_lane, const std::string& model_path, const ros::Publisher& vis_pub);
    ~HpdmPlannerCore();

    // Load data with consistence, which means in an replanning circle
    void load(const Vehicle& ego_vehicle, const std::unordered_map<int, Vehicle>& surround_vehicles, const std::vector<double>& lane_info, const Lane& pre_reference_lane, const Vehicle& pre_ego_desired_vehicle_state);

    // Load data without consistence
    void load(const Vehicle& ego_vehicle, const std::unordered_map<int, Vehicle>& surround_vehicles, const std::vector<double>& lane_info);

    // Run HPDM planner
    void runHpdmPlanner(int lon_candidate_num, std::vector<Vehicle>* ego_traj, std::unordered_map<int, std::vector<Vehicle>>* sur_trajs, Lane* target_reference_lane, bool* safe, double* cost, bool* is_lane_changed);

    BehaviorPlanner::MapInterface* map_itf_{nullptr};
    TrajectoryGenerator* traj_generator_{nullptr};
    StateInterface* state_itf_{nullptr};
    TorchInterface* torch_itf_{nullptr};
    // DEBUG visualization
    ros::Publisher vis_pub_;

    Vehicle ego_vehicle_;
    std::unordered_map<int, Vehicle> surround_vehicles_;
    std::vector<double> lane_info_;
    bool with_consistence_ = false;
    Lane pre_reference_lane_;
    Vehicle pre_ego_desired_vehicle_state_;

};

} // End of namespace HpdmPlanner
